name: PR Integration Test for Repo1

on:
  pull_request:
    branches:
      - main

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest

    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      # Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Run tests
      - name: Run Tests
        run: python -m unittest discover

      # Build Docker image
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/test-repo1:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/test-repo1:latest

      # Trigger Kube-Test Pipeline
      - name: Trigger Kube-Test Pipeline
        id: kube_test_trigger
        run: |
          response=$(curl -X POST \
            -H "Authorization: token ${{ secrets.KUBE_TEST_TOKEN }}" \
            -H "Accept: application/vnd.github.everest-preview+json" \
            https://api.github.com/repos/rlghks-aiofarm/kube-test/dispatches \
            -d '{"event_type": "pr-integration-test", "client_payload": {"updated_repo": "test-repo1"}}')

          echo "Kube-Test triggered, checking status..."
          echo "::set-output name=trigger_status::success"

      # Fetch Kube-Test Run ID
      - name: Fetch Kube-Test Run ID
        id: fetch_run_id
        run: |
          # Sleep to wait for Kube-Test initialization
          sleep 5

          response=$(curl -H "Authorization: token ${{ secrets.KUBE_TEST_TOKEN }}" \
          https://api.github.com/repos/rlghks-aiofarm/kube-test/actions/runs)

          echo "Response: $response"

          # Fetch the latest workflow runs for the kube-test repository
          run_id=$(curl -H "Authorization: token ${{ secrets.KUBE_TEST_TOKEN }}" \
            https://api.github.com/repos/rlghks-aiofarm/kube-test/actions/runs \
            | jq -r '.workflow_runs | map(select(.status == "queued" or .status == "in_progress")) | sort_by(.created_at) | reverse | .[0].id')

          # Exit if no run_id is found
          if [ -z "$run_id" ] || [ "$run_id" == "null" ]; then
            echo "Failed to retrieve run_id for kube-test."
            exit 1
          fi

          echo "Fetched run ID: $run_id"
          echo "::set-output name=run_id::$run_id"

      - name: Validate Run ID
        if: steps.fetch_run_id.outputs.run_id == null || steps.fetch_run_id.outputs.run_id == ''
        run: |
          echo "Invalid or null run_id detected. Debugging response..."
          response=$(curl -H "Authorization: token ${{ secrets.KUBE_TEST_TOKEN }}" \
            https://api.github.com/repos/rlghks-aiofarm/kube-test/actions/runs)
          echo "API Response: $response"
          exit 1

      # Poll Kube-Test Pipeline status
      - name: Wait for Kube-Test to Complete
        run: |
          run_id=${{ steps.fetch_run_id.outputs.run_id }}
          if [ -z "$run_id" ] || [ "$run_id" == "null" ]; then
            echo "Invalid run_id. Exiting."
            response=$(curl -H "Authorization: token ${{ secrets.KUBE_TEST_TOKEN }}" \
              https://api.github.com/repos/rlghks-aiofarm/kube-test/actions/runs)
            echo "API Response: $response"
            exit 1
          fi

          status="in_progress"
          conclusion="null"
          max_retries=30
          retry_count=0
          sleep_time=10

          while [[ "$status" == "queued" || "$status" == "in_progress" ]]; do
            if [[ $retry_count -ge $max_retries ]]; then
              echo "Kube-Test did not complete within the expected time. Exiting."
              response=$(curl -H "Authorization: token ${{ secrets.KUBE_TEST_TOKEN }}" \
                https://api.github.com/repos/rlghks-aiofarm/kube-test/actions/runs/$run_id)
              echo "API Response: $response"
              exit 1
            fi

            response=$(curl -H "Authorization: token ${{ secrets.KUBE_TEST_TOKEN }}" \
              https://api.github.com/repos/rlghks-aiofarm/kube-test/actions/runs/$run_id)
            echo "Current API Response: $response"
            
            status=$(echo "$response" | jq -r '.status')
            conclusion=$(echo "$response" | jq -r '.conclusion')

            if [[ "$status" == "404" ]]; then
              echo "Invalid run_id or run not found. Exiting."
              exit 1
            fi

            echo "Current status: $status, Conclusion: $conclusion"
            if [[ "$conclusion" == "success" ]]; then
              echo "Kube-Test passed successfully."
              exit 0
            elif [[ "$conclusion" == "failure" ]]; then
              echo "Kube-Test failed. Exiting workflow."
              exit 1
            fi

            echo "Waiting for 10 seconds before retrying..."
            ((retry_count++))
            sleep $sleep_time
          done

      # # Deploy to Kubernetes
      # - name: Set up kubectl
      #   uses: azure/setup-kubectl@v3
      #   with:
      #     version: 'v1.26.0'

      # - name: Deploy to Kubernetes
      #   env:
      #     KUBECONFIG: ${{ secrets.KUBECONFIG }}
      #   run: |
      #     kubectl apply -f k8s/deployment.yaml
      #     kubectl apply -f k8s/service.yaml
